@use "sass:list";
@use "../validators/contains-falsy";
@use "compact-shorthand";

@charset "UTF-8";

// scss-lint:disable SpaceAroundOperator

/// Builds directional properties by parsing CSS shorthand values. For example,
/// a value of `10px null` will output top and bottom directional properties,
/// but the `null` skips left and right from being output.
///
/// @argument {string} $property
///   Base property.
///
/// @argument {string} $suffix
///   Suffix to append. Use `null` to omit.
///
/// @argument {list} $values
///   List of values to set for the property.
///
/// @example scss
///   .element {
///     @include _directional-property(border, width, null 5px);
///   }
///
///   // CSS Output
///   .element {
///     border-right-width: 5px;
///     border-left-width: 5px;
///   }
///
/// @require {function} _compact-shorthand
///
/// @require {function} _contains-falsy
///
/// @access private

@mixin directional-property(
  $property,
  $suffix,
  $values
) {
  $top:    $property + "-top"    + if($suffix, "-#{$suffix}", "");
  $bottom: $property + "-bottom" + if($suffix, "-#{$suffix}", "");
  $left:   $property + "-left"   + if($suffix, "-#{$suffix}", "");
  $right:  $property + "-right"  + if($suffix, "-#{$suffix}", "");
  $all:    $property +             if($suffix, "-#{$suffix}", "");

  $values: compact-shorthand.compact-shorthand($values);

  @if contains-falsy.contains-falsy($values) {
    @if list.nth($values, 1) { #{$top}: list.nth($values, 1); }

    @if list.length($values) == 1 {
      @if list.nth($values, 1) { #{$right}: list.nth($values, 1); }
    } @else {
      @if list.nth($values, 2) { #{$right}: list.nth($values, 2); }
    }

    @if list.length($values) == 2 {
      @if list.nth($values, 1) { #{$bottom}: list.nth($values, 1); }
      @if list.nth($values, 2) { #{$left}: list.nth($values, 2); }
    } @else if list.length($values) == 3 {
      @if list.nth($values, 3) { #{$bottom}: list.nth($values, 3); }
      @if list.nth($values, 2) { #{$left}: list.nth($values, 2); }
    } @else if list.length($values) == 4 {
      @if list.nth($values, 3) { #{$bottom}: list.nth($values, 3); }
      @if list.nth($values, 4) { #{$left}: list.nth($values, 4); }
    }
  } @else {
    #{$all}: $values;
  }
}
